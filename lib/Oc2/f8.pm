# E7TMLKEY: Octology::f8.pm by PipStuart <Pip@CPAN.Org> to provide general f0nt && pal8 objects && files for usage, management, && manipul8ion of present8ion;
package     Octology::f8;
# O1LLJUCY: 2du: gNr8 all b256 UTF-8 charz in2 .f0x fIlz (like ./f0nt/01.x) thN mk dMO th@ shOz all .f0nt fIlz az src 4 .f0x wich thN gNr8 all .psf && .ttf,
#   the 1920x1080 (FHD 1080p) linux console fitz 12x21.6 bitmapz in 160x50 char dimNsionz && 3840x2160 (4K? UHD) can have 24x43.2 bitmapz thN run an anim8ion
#   in a VM th@ I can scAl 2 shO syncd thru scrn/tmux? or just d8 tImrz cycling thru all .f0nt in consol && any term-MUl8r th@ can lOd the gNd TTFz && rOt8!,
#   alsO add all the UTF-8 digraphz from Vim && mAB stRt gNr8ing bitmapz for all UniCode of every .TTF && mAB try upd8ing GnomTerm TTF or rElOd or somthng?;
# O1LLLLLL: 2du: mk pal8 accept -pFileName(\.pal8)?/ignrcAse or -8b64char for just abrEV8ion && any singl-letr FileName alreD iz sAm b64 sO mAB tAk --FlNm?;
# O3TM2psf: 2du: rEd && stuD man pagez 4: setfont psfaddtable psfgettable psfstriptable psfxtable && kernel dox on frame-buffer devices 2 understand better;
# O44M4444: 2du: mk Utl 2 tAk bAsic --##--#- f0nt d8a 4 each of 6 (b64) or 8 (b256) bitz (allow 4 combInd thumb in,up,out,down 4 b64-hndz.f0nt) && gNr8â€¦TTF;
use warnings;use  strict;use utf8;use v5.22; #use open qw[:std :encoding(UTF-8)]; # OMGoodness! This use open was forcing extra dbld utf8 in2 gNr8d .psf ! ;
#equire     Exporter;
#se base qw(Exporter);
use         Encode  qw(decode encode);
use         Octology::a8;
use         Octology::b8;
#se         Octology::c8; # c8 needs to use f8 more than vice versa for now, but eventually I'll want interactive f8 object editing, maybe as a subclass
use         Octology::d8;
use         Carp;
#ur        @EXPORT= qw();
our $VERSION='0.000001';my $d8VS='O3TM9OpN';our $Auth='PipStuart <Pip@CPAN.Org>';
my %libz =();my @lfls =();my @lpls =(); # search lib dirs for usable f0nts && pal8s && load LibF0ntLiSt && LibPal8LiSt
#if(exists($ENV{'PERL5LIB'})){for(split(/:/,$ENV{'PERL5LIB'})){$libz{$_}=1 if(-d "$_");}}
#if(exists($ENV{'HOME'}) && -d "$ENV{'HOME'}/lib"){$libz{"$ENV{'HOME'}/lib"}=1;}
#for(keys(%libz)){if(-d "$_/Octology/f8/f0nt"){push(@lfls,<"$_/Octology/f8/f0nt/*.f0nt">);}
#                 if(-d "$_/Octology/f8/pal8"){push(@lpls,<"$_/Octology/f8/pal8/*.pal8">);}}
# then match found files to filename maps to maybe realloc8 abbreV8ions for not found ones to others that are available
#[pip@AkuE85MG5cD~/dvl/f8]echo $PERL5LIB
#/home/pip/lib:/home/pip/lib/perl5/lib/perl5/x86_64-linux-gnu-thread-multi:/home/pip/lib/perl5/lib/perl5:./lib
# J7JM0tru:From HTTPS://RT.CPAN.Org/Public/Bug/Display.html?id=130083  +is    truecolor(0xba,0xda,0x55), "\e[38;2;186;218;85m" , 'sub    truecolor';
#   TrueColor 24-bit support in Term-ANSIColor end tests:              +is on_truecolor(0xc0,0xff,0xee), "\e[48;2;192;255;238m", 'sub on_truecolor';
# include inline Default F8 tEKtItE.f0nt as fallback in case external chosen f0nts cannot be found or loaded adequ8ly, but mAB 1 default shud B less stylish?
# O32L6Hrc:from ~/.Hrc the following brief sections should expand 2 .f0nt namz;
# cf:01234567 ->   7c93O537 => standrd0, roman-1 , futura-2, lat4-163 ,  lat4-16+, finnish5, gr.f16  , thin7   ; # c8:f0nt:Dfalt b64 ordr filename map
# cf:89ABCDEF ->   59ABCDEF => tallg88d, france9 , Alt-8x16, Bold     ,  CyrilliC, moDern-1, EurotypE, Fraktur ; # almOst alwAys oppOsing cAse rEin4cez  V8z
# cf:GHIJKLMN ->   GHIJKLMN => Greek   , Hebrew  , Inverted, scottJ   ,  blocK   , Lcd     , Modern-2, Norway  ; # mv all filenamez 2     cAse rEin4ce more?
# cf:OPQRSTUV ->   OPQRSTUV => crOstall, suPer   , teQton  , ReveRse  ,  Surreal , Thai    , coUrier , silVer  ;
# cf:WXYZabcd ->   WXYZABCD => backWard, bigXerif, stretchY, ZanZurf  ,  FUTURa-1, bROADWAY, cALLIGRA, dECO    ;
# cf:efghijkl ->   EFGHIJKL => eMPTY   , fAT     , gRFIXED , hEARST   ,  iTALiCS , CRAKRjAK, kIDS-1  , lEDFONT ; # V8 failz:035789JQ XYZxz._ pre rename && mv
# cf:mnopqrst ->   MNOPQRST => mED     , nICEFnT , FRESNo  , SLOppY   ,  ANTIqUE , rOMAN3  , sCRIPT  , tEKtItE ; # swapd fRAKTUR && Fat to match cs:Fraktur on
# cf:uvwxyz._ ->   UVWXYZ__ => COMPuTER, MEDIEvAL, wEIRD   , xANxERIF ,  HyLAS   , zWIzz-1 , bnc.drop, bnc_blok; # max4th level rash sOfR _Lm:*
# cp:BbcpdDRF ->   PBCPdDRF => Bepspurp, bLUES   , cOOL    , DARKpRIM ,  dARKZ   , Default , deepRed , Flipped ; # c8:pal8:initial 16  filenamez like cf:
# cp:gnrsfTty ->   GNrSfTtY => gOOFY   , nICE    , r       , sILLY    ,  TIGSfAVS, Tigzfavz, t       , yEL     ; # V8 failz: none yet, shud grow 2 top64
# cp:8PHS     ->   8PHS     => 8bow    , Penguin , Heather , Sweet                                             ; # strtd adding a few more new pal8z
# cS:NBAIULKR ->   KWwGCORY -> N:01234567 => Normal      , Bold        , fAint       , ItalIc      ,  Underline   , bLink       , blinK       , ReveRse     ;
# cS:VC012345 ->   BRROYGCB -> N:89ABCDEF => inVisible   , Crossedout  , 0defaultf0nt, 1altern8f0nt,  2altern8f0nt, 3altern8f0nt, 4altern8f0nt, 5altern8f0nt;
# cS:6789FDbi ->   MPRORWwg -> N:GHIJKLMN => 6altern8f0nt, 7altern8f0nt, 8altern8f0nt, 9altern8f0nt,  Fraktur     , DblunDerline, bOLD        , iTALiC      ;
# cS:ulSrvcXY ->   coByOrGY -> N:OPQRSTcd => uNDERLINE   , BlINK       , reServed    , rEVErSE     ,  vISIBLE     , cROSSEDOUT  , eXtendedcolr, dfltextYcolr;
# cS:xysMEOmo ->   gybMCGmg -> N:mnopqrst => ExTENDEDCOLR, DFLTEXTyCOLR, REsERVED    , fraMed      ,  EncirclEd   , Overlined   , FRAmED      , oVERLINED   ;#u-x
# cS:HhTtGg   ->   CMRYGg   -> N:yz._uv   => igulorlrigHt, IGDUORLRIGhT, igolorllefT , IGDOORLLEFt ,  iGstress    , IgOFF       ; # IdeoGram(Dbl)?UndROvLnz#rsrvd
# cS:nafdke   -> S:Nbiulm   -> N:0MNOPs   => nORMAL      , FaINT       , fRAKTUR     , dBLUNdERLINE,  BLINk       , eNCIRCLeD   ; # Xtraz2remap2aliasz4now#<=y-11
# #cS_:YyH                  => c, m, y; # an altern8map4N: wi b64 ofstandRd SGR cOdz nEd2ovrId DfltdFinition ordrincrMNtng indiCz #   but l8r mAB rEdF aznw funcz
# # SGR col8 layerz are special because the interpret8ionz are not mutually exclusive like colrz && f0ntz, so Ech atribUt has cOXistNt On && oFF formz instead
my $df8f = "f80p s 4 0 G
0-F
-------- -------- -------- -------- -------- -------- -------- -------- ######## -------- ######## -------- -------- -------- -------- --------
-------- -------- -------- -------- -------- -------- -------- -------- ######## -------- ######## -------- -------- -------- ---#---- --------
-------- --####-- --####-- -------- -------- -------- -------- -------- ######## -------- ######## ----#### -######- ----#--- ---##--- ---##---
-------- -#----#- -######- -------- -------- ---##--- ---##--- -------- ######## -------- ######## -----### ##----## ----##-- ---###-- ---##---
-------- #------# ######## -##--##- ---##--- --####-- --####-- -------- ######## -------- ######## ----##-# ##----## ----###- ---#-##- ##-##-##
-------- ###--### #--##--# ######## --####-- --####-- -######- -------- ######## --####-- ##----## ---##--- ##----## ----#-## ---##-#- -######-
-------- #-#--#-# ##-##-## ######## -######- -#-##-#- ######## ---##--- ###--### -##--##- #--##--# --#####- -######- ----#--- ---#-##- --####--
-------- #--##--# ###--### ######## ######## ######## ######## --####-- ##----## -#----#- #-####-# -##---## ---##--- ----#--- ---#--#- ########
-------- #------# ######## ######## -######- ######## ######## --####-- ##----## -#----#- #-####-# ##----## ---##--- ----#--- -###--#- --####--
-------- #--##--# ###--### -######- --####-- -#-##-#- -#-##-#- ---##--- ###--### -##--##- #--##--# ##----## ---####- -####--- ####--#- -######-
-------- -#----#- -######- --####-- ---##--- ---##--- ---##--- -------- ######## --####-- ##----## ##---##- -####--- #####--- -##---#- ##-##-##
-------- --####-- --####-- ---##--- -------- --####-- --####-- -------- ######## -------- ######## -#####-- ---##--- -###---- ----###- ---##---
-------- -------- -------- -------- -------- -------- -------- -------- ######## -------- ######## -------- -------- -------- ---####- ---##---
-------- -------- -------- -------- -------- -------- -------- -------- ######## -------- ######## -------- -------- -------- ----##-- --------
-------- -------- -------- -------- -------- -------- -------- -------- ######## -------- ######## -------- -------- -------- -------- --------
-------- -------- -------- -------- -------- -------- -------- -------- ######## -------- ######## -------- -------- -------- -------- --------
G-V
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
-------- -------- -------- -------- -------- ---##### -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
-##----- -----##- ---#---- -##--##- --###### --##---- -------- ---#---- ---#---- --###--- -------- -------- ##--##-- -------- -------- --------
-###---- ----###- --###--- -##--##- -####-## -####--- -------- --###--- --###--- --###--- -------- -------- -##--##- -------- -------- --------
-####--- ---####- -#####-- -##--##- ##-##-## ##-###-- -------- -#####-- -#####-- --###--- -------- -------- --##--## -------- ---##--- ########
-#####-- --#####- #######- -##--##- ##-##-## ##--###- -------- #######- #######- --###--- ----#--- ---#---- -------- --#--#-- --####-- ########
-######- -######- --###--- -##--##- ##-##-## ###--### -------- --###--- --###--- --###--- ----##-- --##---- -------- -##--##- --####-- -######-
-######- -######- --###--- -##--##- -####### -###--## -------- --###--- --###--- --###--- #######- -####### -------- ######## -######- -######-
-#####-- --#####- --###--- -##--##- --###-## --###-## -######- --###--- --###--- --###--- ######## ######## -------- ######## -######- --####--
-####--- ---####- --###--- -------- ---##-## ---####- -######- #######- --###--- --###--- #######- -####### -------- -##--##- ######## --####--
-###---- ----###- #######- -##--##- ---##-## ----##-- -######- -#####-- --###--- #######- ----##-- --##---- -------- --#--#-- ######## ---##---
-##----- -----##- -#####-- -##--##- ---##-## ---##--- -######- --###--- --###--- -#####-- ----#--- ---#---- -------- -------- -------- --------
-------- -------- --###--- -------- -------- --##---- -------- ---#---- --###--- --###--- -------- -------- -------- -------- -------- --------
-------- -------- ---#---- -------- -------- ###----- -------- -------- --###--- ---#---- -------- -------- -------- -------- -------- --------
-------- -------- -------- -------- -------- -------- -------- #######- -------- -------- -------- -------- -------- -------- -------- --------
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
W-l
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
-------- -------- -------- -------- ---##--- -------- -------- -------- ----##-- --##---- -------- -------- -------- -------- -------- --------
-------- ---##--- --##--## --##--## -######- -##----- ---###-- ----##-- ---##--- ---##--- -##--##- -------- -------- -------- -------- -----##-
-------- ---##--- -##--##- --##--## ##-##-## ##-#---# --##-##- ---##--- --##---- ----##-- --####-- -------- -------- -------- -------- -----#--
-------- ---##--- ##--##-- ######## ##-##--- #-##--## -##--##- --##---- --##---- ----##-- ######## -------- -------- -------- -------- ----##--
-------- ---##--- -------- -##--##- -####--- -##--##- --####-- -------- -##----- -----##- --####-- ---##--- -------- -------- -------- ----#---
-------- ---##--- -------- -##--##- ---###-- ----##-- --###--- -------- -##----- -----##- -##--##- ---##--- -------- -------- -------- ---##---
-------- ---##--- -------- -##--##- ---####- ---##--- -##-##-- -------- -##----- -----##- -------- -######- -------- -######- -------- ---#----
-------- ---##--- -------- -##--##- ---##-## --##-##- ##---### -------- -##----- -----##- -------- ---##--- -------- -------- -------- --##----
-------- -------- -------- ######## ##-##-## -##-##-# ##---##- -------- --##---- ----##-- -------- ---##--- -------- -------- -------- --#-----
-------- ---##--- -------- ##--##-- ##-##-## ##--#-## -##-###- -------- --##---- ----##-- -------- -------- ----##-- -------- ---##--- -##-----
-------- ---##--- -------- ##--##-- -######- -----##- --###-## -------- ---##--- ---##--- -------- -------- ---##--- -------- ---##--- -#------
-------- -------- -------- -------- ---##--- -------- -------- -------- ----##-- --##---- -------- -------- --##---- -------- -------- ##------
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
m-_
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
--#####- ----##-- --#####- ######## -----##- ---##### --####-- ######## --####-- --####-- -------- -------- -----##- -------- -##----- --#####-
-##---## ---###-- -##---## ##---##- ----###- ####---- -##--##- ##----## -##--##- -##--##- -------- -------- ----##-- -------- --##---- -##---##
##----## --####-- ##----## ----##-- ---####- ##------ ##---##- -----##- ##---##- ##---##- ---##--- ---##--- ---##--- -------- ---##--- ##---##-
##----## -##-##-- ------## ---##--- --##-##- ##-###-- ##------ ----##-- -##-##-- ##---##- ---##--- ---##--- --##---- ######## ----##-- ----##--
##----## ----##-- -----##- --#####- -##--##- ####-##- ##-###-- ----##-- --#####- ##-####- -------- -------- -##----- -------- -----##- ---##---
##--#### ----##-- ----##-- ------## ##---### ------## ####-##- ---##--- -##---## -###-##- -------- -------- -##----- -------- -----##- --##----
##-##-## ----##-- ---##--- ------## ##-####- ------## ##---##- ---##--- ##----## -----##- -------- -------- --##---- ######## ----##-- --##----
####--## ----##-- --##---- ##----## ####-##- ##----## ##---##- --##---- ##----## ##---##- ---##--- ---##--- ---##--- -------- ---##--- --------
##---##- ----##-- -##---## ##---##- -----##- ##---##- ##--##-- --##---- ##---##- ##--##-- ---##--- ---##--- ----##-- -------- --##---- --##----
-#####-- ----##-- ######## -#####-- -----##- -#####-- -####--- --##---- -#####-- -####--- -------- --##---- -----##- -------- -##----- --##----
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
10-1F
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
---####- ---##--- ---####- ---####- ######-- ---####- ---####- --#####- ##----## ---###-- ------## ##----## ##------ ##----## ##----## --#####-
--##--## ---##--- --##--## --##--## ##---##- ####---- ####---- -##---## ##----## --###--- ------## ##---##- ##------ ##----## ##----## -##---##
-##-#### --####-- ###---## -##----- ##----## ##------ ##------ ##------ ##----## ---##--- ------## ##-###-- ##------ ###--### ###---## ##----##
##-##-## --#--#-- ##---##- ##------ ##----## ##------ ##------ ##------ ##----## ---##--- ------## ####---- ##------ ###-#### ####--## ##----##
##-##-## -##--##- ##-###-- ##------ ##----## ##-###-- ##-###-- ##------ ##--#### ---##--- ------## ###----- ##------ #####-## ##-#--## ##----##
##-##-## -##-###- ####-### ##------ ##----## ####---- ####---- ##--#### #####-## ---##--- ------## ####---- ##------ ##-#--## ##-##-## ##----##
##-####- -####-#- ##----## ##------ ##----## ##------ ##------ ##----## ##----## ---##--- ##----## ##-##--- ##------ ##----## ##--#### ##----##
##-##--- ###---## ##---##- ##------ ##---##- ##------ ##------ ##----## ##----## ---##--- ##----## ##--##-- ##------ ##----## ##---### ##----##
##---##- ##----## ##-###-- -##---## ##-###-- ##-####- ##------ -##--##- ##----## ---###-- -##---## ##---##- ##-####- ##----## ##----## ##---##-
##-###-- ##----## ####---- --#####- ####---- ####---- ##------ --####-- ##----## --###--- --#####- ##----## ####---- ##----## ##----## -#####--
-###---- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
1G-1V
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --#####- -------- -#####-- ---##--- --------
---####- --#####- ---####- -######- ----#### ##----## ##----## ##----## ##----## ##----## ---##### --##---- ##------ ----##-- --####-- --------
--##--## -##---## --##--## ##----## #####--- ##----## ##----## ##----## ##----## ##----## ####-##- --##---- -#------ ----##-- -##--##- --------
###---## ##----## ###---## ##------ ---##--- ##----## ##----## ##----## -##--##- -##--##- -----#-- --##---- -##----- ----##-- ##------ --------
##----## ##----## ##----## -###---- ---##--- ##----## ##----## ##----## -##--##- -##--##- ----##-- --##---- --#----- ----##-- -------- --------
##---##- ##----## ##---##- ---###-- ---##--- ##----## -##--##- ##-##-## --####-- --####-- ---##--- --##---- --##---- ----##-- -------- --------
##-###-- ##----## ######-- -----##- ---##--- ##----## -##--##- ##-##-## --####-- ---##--- ---#---- --##---- ---#---- ----##-- -------- --------
####---- ####--## ##-##--- ------## ---##--- ##---##- -#####-- ##-##-## -##--##- ---##--- --##---- --##---- ---##--- ----##-- -------- --------
##------ ##-####- ##--##-- ##----## ---##--- ##---##- --###--- ######## -##--##- ---##--- --#----- --##---- ----#--- ----##-- -------- --------
##------ ##--##-- ##---##- ##----## ---##--- ##--##-- --##---- ###--### ##----## ---##--- -##-#### --##---- ----##-- ----##-- -------- --------
##------ -#####-- ##----## -######- ---##--- -####--- --##---- ##----## ##----## ---##--- #####--- --##---- -----#-- ----##-- -------- --------
-------- -----##- -------- -------- -------- -------- -------- -------- -------- -------- -------- --#####- -----##- -#####-- -------- --------
-------- ------## -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- ########
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
1W-1l
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
--##---- -------- ##------ -------- ------## -------- ---####- -------- ##------ ---##--- ----##-- ##------ --###--- -------- -------- --------
---##--- -------- ##------ -------- ------## -------- --##--## -------- ##------ ---##--- ----##-- ##------ ---##--- -------- -------- --------
----##-- -------- ##------ -------- ------## -------- --##---- -------- ##------ -------- -------- ##------ ---##--- -------- -------- --------
-------- --#####- ##-###-- ---####- ---##### --#####- --##---- --###### ##--###- ---##--- ----##-- ##---##- ---##--- ###--##- ##--###- --#####-
-------- -##---## ####-##- --##--## -###--## -##---## --####-- -##---## ##-##-## ---##--- ----##-- ##--##-- ---##--- ##-##-## ##-##-## -##---##
-------- ---##### ##----## -##----- ##----## ##--###- ####---- ##----## ####--## ---##--- ----##-- ##-##--- ---##--- ##-##-## ####--## ##----##
-------- -###--## ##----## ##------ ##---### #####--- --##---- ##---### ###---## ---##--- ----##-- #####--- ---##--- ##-##-## ###---## ##----##
-------- ##----## ##---##- ##------ ##--#### ##------ --##---- ##--#### ##----## ---##--- ----##-- ###-##-- ---##--- ##----## ##----## ##----##
-------- ##--#### ##-###-- ##----## ##-##-## ##----## --##---- ##-##-## ##----## ---##--- ----##-- ##---##- ---##--- ##----## ##----## ##---##-
-------- -####-## ####---- -######- -###--## -######- --##---- -###--## ##----## ---##--- ----##-- ##----## ---##--- ##----## ##----## -#####--
-------- -------- -------- -------- -------- -------- -------- ------## -------- -------- ##--##-- -------- -------- -------- -------- --------
-------- -------- -------- -------- -------- -------- -------- ##----## -------- -------- ##--##-- -------- -------- -------- -------- --------
-------- -------- -------- -------- -------- -------- -------- -######- -------- -------- -####--- -------- -------- -------- -------- --------
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
1m-1_
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- ----###- ---##--- -###---- -------- --------
-------- -------- -------- -------- ---#---- -------- -------- -------- -------- -------- -------- ---##--- ---##--- ---##--- -------- --------
-------- -------- -------- -------- --##---- -------- -------- -------- -------- -------- -------- ---##--- ---##--- ---##--- -------- --------
-------- -------- -------- -------- --##---- -------- -------- -------- -------- -------- -------- ---##--- ---##--- ---##--- -------- ---#----
##--###- -###--## ##--###- -######- --####-- ##----## ##----## ##----## ##----## ##----## ######## ---##--- ---##--- ---##--- -------- --###---
##-##-## ##-##-## ##-##-## ##----## ####---- ##----## ##----## ##----## -##--##- ##----## -----##- -###---- ---##--- ----###- -###-##- -##-##--
####--## ##--#### ####--## -###---- --##---- ##----## ##----## ##----## --####-- ##----## ----##-- -###---- ---##--- ----###- ##-###-- ##---##-
###---## ##---### ###----- ---####- --##---- ##---### -##--##- ##-##-## ---##--- ##----## ---##--- ---##--- ---##--- ---##--- -------- ##---##-
##----## ##----## ##------ ------## --##-##- ##--#### -##-##-- ##-##-## --####-- ##----## --##---- ---##--- ---##--- ---##--- -------- ##---##-
##---##- -##---## ##------ ##----## --####-- ##-##-## --###--- ######## -##--##- -##--##- -##----- ---##--- ---##--- ---##--- -------- #######-
######-- --###### ##------ -######- ---##--- -###--## ---##--- ##----## ##----## --#####- ######## ---##--- ---##--- ---##--- -------- --------
##------ ------## -------- -------- -------- -------- -------- -------- -------- ----##-- -------- ----###- ---##--- -###---- -------- --------
##------ ------## -------- -------- -------- -------- -------- -------- -------- ##-##--- -------- -------- -------- -------- -------- --------
##------ ------## -------- -------- -------- -------- -------- -------- -------- -###---- -------- -------- -------- -------- -------- --------
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
20-2F
-------- -------- -------- ----##-- -------- -------- ---###-- -------- ---##--- -------- -------- -------- ---##--- -------- -##--##- ---##---
-------- -------- -----##- ---####- -------- --##---- --##-##- -------- --####-- -------- -##----- -------- --####-- -##----- -##--##- --#--#--
---####- -##--##- ----##-- --##--## --##-##- ---##--- --##-##- -------- -##--##- -##--##- --##---- -##--##- -##--##- --##---- ---##--- --#--#--
--##--## -##--##- ---##--- -##----- --##-##- ----##-- ---###-- -------- ##------ -##--##- ---##--- -##--##- ##------ ---##--- ---##--- ---##---
-##----- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --####-- --####--
##------ ##----## --#####- --#####- --#####- --#####- --#####- ---####- --#####- --#####- --#####- ---##--- ---##--- ---##--- --#--#-- --#--#--
##------ ##----## -##---## -##---## -##---## -##---## -##---## --##--## -##---## -##---## -##---## ---##--- ---##--- ---##--- -##--##- -##--##-
##------ ##----## ##--###- ---##### ---##### ---##### ---##### -##----- ##--###- ##--###- ##--###- ---##--- ---##--- ---##--- -##--##- -##--##-
##------ ##---### #####--- -###--## -###--## -###--## -###--## ##------ #####--- #####--- #####--- ---##--- ---##--- ---##--- -######- -######-
##------ ##--#### ##------ ##----## ##----## ##----## ##----## ##------ ##------ ##------ ##------ ---##--- ---##--- ---##--- ##----## ##----##
-##---## ##-##-## ##----## ##--#### ##--#### ##--#### ##--#### ##----## ##----## ##----## ##----## ---##--- ---##--- ---##--- ##----## ##----##
--#####- -###--## -######- -####-## -####-## -####-## -####-## -######- -######- -######- -######- ---##--- ---##--- ---##--- ##----## ##----##
----##-- -------- -------- -------- -------- -------- -------- ----##-- -------- -------- -------- -------- -------- -------- -------- --------
---##--- -------- -------- -------- -------- -------- -------- ---##--- -------- -------- -------- -------- -------- -------- -------- --------
####---- -------- -------- -------- -------- -------- -------- ####---- -------- -------- -------- -------- -------- -------- -------- --------
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
2G-2V
---##--- -------- -------- ---##--- -------- -------- ---##--- -------- -------- -##--##- -##--##- -------- -------- -------- -------- --------
--##---- -------- -------- --####-- -------- -##----- --####-- -##----- -------- -------- -------- -------- -------- -------- -------- --------
-##----- -------- --###### -##--##- -##--##- --##---- -##--##- --##---- -##--##- --#####- ##----## -------- --####-- ##----## ---####- ---####-
---####- -------- --#####- ##------ -##--##- ---##--- ##------ ---##--- -##--##- -##---## ##----## ----#--- -##--##- ##----## --##--## --##--##
####---- -------- --####-- -------- -------- -------- -------- -------- -------- ##----## ##----## ----#--- -##----- -##--##- ###---## --##----
##------ -######- -##-##-- --#####- --#####- --#####- ##----## ##----## ##----## ##----## ##----## ---####- #####--- -##--##- ##----## --##----
##-####- ##-##-## -##-#### -##---## -##---## -##---## ##----## ##----## ##----## ##----## ##----## --###-## -##----- --####-- ##---##- --####--
####---- --###-## -##-###- ##----## ##----## ##----## ##----## ##----## ##----## ##----## ##----## -##-#--- #####--- ---##--- ##-###-- ####----
##------ -######- -#####-- ##----## ##----## ##----## ##---### ##---### ##----## ##----## ##---##- ##--#--- -##----- -######- #####--- --##----
##------ ##-###-- ##--##-- ##----## ##----## ##----## ##--#### ##--#### ##----## ##----## ##---##- ##--#--- -##----- ---##--- ##--##-- --##----
##-####- ##-##-## ##--#### ##---##- ##---##- ##---##- ##-##-## ##-##-## -##--##- ##---##- ##--##-- ##--#-## -##---## -######- ##-####- --##----
####---- -##-###- ##--###- -#####-- -#####-- -#####-- -###--## -###--## --#####- -#####-- -####--- -######- -######- ---##--- ##--##-- --##----
-------- -------- -------- -------- -------- -------- -------- -------- ----##-- -------- -------- ----#--- -------- ---##--- ----#### ###-----
-------- -------- -------- -------- -------- -------- -------- -------- ##-##--- -------- -------- ----#--- -------- -------- ----###- --------
-------- -------- -------- -------- -------- -------- -------- -------- -###---- -------- -------- -------- -------- -------- -----#-- --------
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
2W-2l
-------- -------- -------- -------- -------- ------## -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
-----##- -----##- -----##- ----##-- ------## -###-##- -------- -------- -------- -------- -------- -##----- -##----- -------- -------- --------
----##-- ----##-- ----##-- ---##--- -###-##- ##-###-- --#####- --#####- ----##-- -------- -------- ###----# ###----# ---##--- -------- --------
---##--- ---##--- ---##--- --##---- ##-###-- -------- -##---## -##---## ----##-- -------- -------- -##---## -##---## ---##--- -------- --------
-------- -------- -------- -------- -------- ##----## ---##### ##----## -------- -------- -------- -##--##- -##--##- -------- ------## --------
--#####- ---##--- --#####- ##----## ##--###- ###---## -###--## ##----## ----##-- -------- -------- -##-##-- -##-##-- ---##--- --##-##- -##-##--
-##---## ---##--- -##---## ##----## ##-##-## ####--## ##----## ##----## ----##-- #######- #######- ---##--- ---##--- ---##--- -##-##-- --##-##-
---##### ---##--- ##----## ##----## ####--## ##-#--## ##--#### ##---##- ---##--- ##------ -----##- --##---- --##---- ---##--- ##-##--- ---##-##
-###--## ---##--- ##----## ##---### ###---## ##-##-## -####-## -#####-- --##---- ##------ -----##- -##----- -##--##- ---##--- ##-##--- ---##-##
##----## ---##--- ##----## ##--#### ##----## ##--#### -------- -------- -##---## ##------ -----##- ##--###- ##--###- ---##--- -##-##-- --##-##-
##--#### ---##--- ##---##- ##-##-## ##----## ##---### -------- -------- ##---##- -------- -------- #--##-## #--#-### ---##--- --##-##- -##-##--
-####-## ---##--- -#####-- -###--## ##----## ##----## ######## ######## -#####-- -------- -------- -----##- --#####- ---##--- -------- ##------
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- ----##-# -----##- -------- -------- --------
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- ---##### -----##- -------- -------- --------
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
2m-2_
#-----#- -------- #--#--#- ---##--- ---##--- ---##--- --####-- -------- -------- --####-- --####-- -------- --####-- --####-- ---##--- --------
---#---- #--#-#-# -#--#--# ---##--- ---##--- ---##--- --####-- -------- -------- --####-- --####-- -------- --####-- --####-- ---##--- --------
#-----#- -------- #--#--#- ---##--- ---##--- ---##--- --####-- -------- -------- --####-- --####-- -------- --####-- --####-- ---##--- --------
---#---- #-#-#--# -#--#--# ---##--- ---##--- ---##--- --####-- -------- -------- --####-- --####-- -------- --####-- --####-- ---##--- --------
#-----#- -------- #--#--#- ---##--- ---##--- ---##--- --####-- -------- -------- --####-- --####-- -------- --####-- --####-- ---##--- --------
---#---- #--#-#-# -#--#--# ---##--- ---##--- ---##--- --####-- -------- -------- --####-- --####-- -------- --####-- --####-- ---##--- --------
#-----#- -------- #--#--#- ---##--- ---##--- #####--- --####-- -------- #####--- ######-- --####-- ######-- ######-- --####-- #####--- --------
---#---- #-#-#--# -#--#--# ---##--- ---##--- #####--- --####-- -------- #####--- ######-- --####-- ######-- ######-- --####-- #####--- --------
#-----#- -------- #--#--#- ---##--- #####--- #####--- ######-- ######-- #####--- ######-- --####-- ######-- ######-- ######-- #####--- #####---
---#---- #--#-#-# -#--#--# ---##--- ---##--- ---##--- --####-- --####-- ---##--- --####-- --####-- --####-- -------- -------- -------- ---##---
#-----#- -------- #--#--#- ---##--- ---##--- ---##--- --####-- --####-- ---##--- --####-- --####-- --####-- -------- -------- -------- ---##---
---#---- #-#-#--# -#--#--# ---##--- ---##--- ---##--- --####-- --####-- ---##--- --####-- --####-- --####-- -------- -------- -------- ---##---
#-----#- -------- #--#--#- ---##--- ---##--- ---##--- --####-- --####-- ---##--- --####-- --####-- --####-- -------- -------- -------- ---##---
---#---- #--#-#-# -#--#--# ---##--- ---##--- ---##--- --####-- --####-- ---##--- --####-- --####-- --####-- -------- -------- -------- ---##---
#-----#- -------- #--#--#- ---##--- ---##--- ---##--- --####-- --####-- ---##--- --####-- --####-- --####-- -------- -------- -------- ---##---
---#---- #-#-#--# -#--#--# ---##--- ---##--- ---##--- --####-- --####-- ---##--- --####-- --####-- --####-- -------- -------- -------- ---##---
30-3F
---##--- ---##--- -------- ---##--- -------- ---##--- ---##--- --####-- --####-- -------- --####-- -------- --####-- -------- --####-- ---##---
---##--- ---##--- -------- ---##--- -------- ---##--- ---##--- --####-- --####-- -------- --####-- -------- --####-- -------- --####-- ---##---
---##--- ---##--- -------- ---##--- -------- ---##--- ---##--- --####-- --####-- -------- --####-- -------- --####-- -------- --####-- ---##---
---##--- ---##--- -------- ---##--- -------- ---##--- ---##--- --####-- --####-- -------- --####-- -------- --####-- -------- --####-- ---##---
---##--- ---##--- -------- ---##--- -------- ---##--- ---##--- --####-- --####-- -------- --####-- -------- --####-- -------- --####-- ---##---
---##--- ---##--- -------- ---##--- -------- ---##--- ---##--- --####-- --####-- -------- --####-- -------- --####-- -------- --####-- ---##---
---##--- ---##--- -------- ---##--- -------- ---##--- ---##### --####-- --###### --###### ######## ######## --###### ######## ######## ########
---##--- ---##--- -------- ---##--- -------- ---##--- ---##### --####-- --###### --###### ######## ######## --###### ######## ######## ########
---##### ######## ######## ---##### ######## ######## ---##### --###### --###### --###### ######## ######## --###### ######## ######## ########
-------- -------- ---##--- ---##--- -------- ---##--- ---##--- --####-- -------- --####-- -------- --####-- --####-- -------- --####-- --------
-------- -------- ---##--- ---##--- -------- ---##--- ---##--- --####-- -------- --####-- -------- --####-- --####-- -------- --####-- --------
-------- -------- ---##--- ---##--- -------- ---##--- ---##--- --####-- -------- --####-- -------- --####-- --####-- -------- --####-- --------
-------- -------- ---##--- ---##--- -------- ---##--- ---##--- --####-- -------- --####-- -------- --####-- --####-- -------- --####-- --------
-------- -------- ---##--- ---##--- -------- ---##--- ---##--- --####-- -------- --####-- -------- --####-- --####-- -------- --####-- --------
-------- -------- ---##--- ---##--- -------- ---##--- ---##--- --####-- -------- --####-- -------- --####-- --####-- -------- --####-- --------
-------- -------- ---##--- ---##--- -------- ---##--- ---##--- --####-- -------- --####-- -------- --####-- --####-- -------- --####-- --------
3G-3V
--####-- -------- -------- --####-- ---##--- -------- -------- --####-- ---##--- ---##--- -------- ######## -------- ####---- ----#### ########
--####-- -------- -------- --####-- ---##--- -------- -------- --####-- ---##--- ---##--- -------- ######## -------- ####---- ----#### ########
--####-- -------- -------- --####-- ---##--- -------- -------- --####-- ---##--- ---##--- -------- ######## -------- ####---- ----#### ########
--####-- -------- -------- --####-- ---##--- -------- -------- --####-- ---##--- ---##--- -------- ######## -------- ####---- ----#### ########
--####-- -------- -------- --####-- ---##--- -------- -------- --####-- ---##--- ---##--- -------- ######## -------- ####---- ----#### ########
--####-- -------- -------- --####-- ---##--- -------- -------- --####-- ---##--- ---##--- -------- ######## -------- ####---- ----#### ########
--####-- ######## -------- --####-- ---##### ---##### -------- --####-- ######## ---##--- -------- ######## -------- ####---- ----#### ########
--####-- ######## -------- --####-- ---##### ---##### -------- --####-- ######## ---##--- -------- ######## -------- ####---- ----#### ########
######## ######## ######## --###### ---##### ---##### --###### ######## ######## #####--- ---##### ######## ######## ####---- ----#### --------
-------- ---##--- --####-- -------- -------- ---##--- --####-- --####-- ---##--- -------- ---##--- ######## ######## ####---- ----#### --------
-------- ---##--- --####-- -------- -------- ---##--- --####-- --####-- ---##--- -------- ---##--- ######## ######## ####---- ----#### --------
-------- ---##--- --####-- -------- -------- ---##--- --####-- --####-- ---##--- -------- ---##--- ######## ######## ####---- ----#### --------
-------- ---##--- --####-- -------- -------- ---##--- --####-- --####-- ---##--- -------- ---##--- ######## ######## ####---- ----#### --------
-------- ---##--- --####-- -------- -------- ---##--- --####-- --####-- ---##--- -------- ---##--- ######## ######## ####---- ----#### --------
-------- ---##--- --####-- -------- -------- ---##--- --####-- --####-- ---##--- -------- ---##--- ######## ######## ####---- ----#### --------
-------- ---##--- --####-- -------- -------- ---##--- --####-- --####-- ---##--- -------- ---##--- ######## ######## ####---- ----#### --------
3W-3l
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -----### -------- -------- -------- --------
-------- ---####- ---##### -------- ---##### -------- -------- -------- ---##--- -------- --####-- ---###-- -------- -------- ---####- --------
-------- --##--## ####--## -------- ####---- -------- -------- -------- ---##--- --####-- -##--##- --##---- -------- ------#- --##---- -######-
-------- ###---## ##----## ------## -##----- -------- -------- -##-#### -######- -##--##- ##----## ---##--- -------- -----#-- -##----- ##----##
------## ##----#- ##------ -######- --##---- -####### -##---## #-###--- ##-##-## ##----## ##----## ----##-- -##-###- -#####-- -##----- ##----##
-###-##- ##--##-- ##------ ###--##- ---##--- ####---- -##---## --##---- ##-##-## ##----## ##----## --#####- ##-##-## ##--###- -######- ##----##
##--##-- ##----#- ##------ -##--##- --##---- ##-##--- -##---## --##---- ##-##-## ######## ##----## -##--##- ##-##-## ##-#-##- -##----- ##----##
##--##-- ##----## ##------ -##--##- -##----- ##-##--- -##---## --##---- ##-##-## ##----## -##--##- ##---##- ##-##-## ###--##- -##----- ##----##
##--##-- ##----## ##------ -##--##- ##------ ##-##--- -##--### --##---- -######- ##----## --#--#-- ##---##- -###-##- -#####-- -##----- ##----##
##-####- ##--###- ##------ -##--##- ##-##### ##-##--- -##-#### --##---- ---##--- -##--##- #-#--#-# ##--##-- -------- -#------ --##---- ##----##
-###--## ##-##--- ##------ -#---#-- ####---- -###---- -####-## --##---- ---##--- --####-- ###--### -####--- -------- #------- ---####- ##----##
-------- ##------ -------- -------- -------- -------- -##----- -------- -------- -------- -------- -------- -------- -------- -------- --------
-------- ##------ -------- -------- -------- -------- -##----- -------- -------- -------- -------- -------- -------- -------- -------- --------
-------- -------- -------- -------- -------- -------- ##------ -------- -------- -------- -------- -------- -------- -------- -------- --------
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
3m-3_
-------- -------- -------- -------- -------- ---##--- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
-------- -------- -------- -------- -------- ---##--- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
-------- -------- -------- -------- -------- ---##--- -------- -------- --####-- -------- -------- ------## ##-###-- -####--- -------- --------
-------- -------- --##---- ----##-- ----###- ---##--- -------- -------- -##--##- -------- -------- ------#- ####-##- ##--##-- -------- --------
######## ---##--- ---##--- ---##--- ---##-## ---##--- ---##--- -------- -##--##- -------- -------- -----##- ###--##- ---##--- -######- --------
-------- ---##--- ----##-- --##---- ---##-## ---##--- ---##--- -###-##- --####-- -------- -------- -----#-- ##---##- --##---- -######- --------
-------- -######- -----##- -##----- ---##--- ---##--- -------- ##-###-- -------- -------- -------- ----##-- ##---##- -##--#-- -######- --------
######## ---##--- ----##-- --##---- ---##--- ---##--- ######## -------- -------- ---##--- -------- ----#--- ##---##- ######-- -######- --------
-------- ---##--- ---##--- ---##--- ---##--- ---##--- -------- -###-##- -------- ---##--- ---##--- ##-##--- -------- -------- -######- --------
-------- -------- --##---- ----##-- ---##--- ##-##--- ---##--- ##-###-- -------- -------- -------- -#-#---- -------- -------- -######- --------
######## -------- -------- -------- ---##--- ##-##--- ---##--- -------- -------- -------- -------- -###---- -------- -------- -######- --------
-------- -######- -######- -######- ---##--- -###---- -------- -------- -------- -------- -------- --#----- -------- -------- -------- --------
-------- -------- -------- -------- ---##--- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
-------- -------- -------- -------- ---##--- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
-------- -------- -------- -------- ---##--- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
-------- -------- -------- -------- ---##--- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------";
sub new{my($nvkr,$ityp,$idat)=@_;my $nobj=ref($nvkr);
  my $clas=$ityp;$clas=$nobj|| $nvkr if(!defined($ityp)|| $ityp!~ /::/);
  my $self=bless({},$clas); # maybe should also allow construction from filenames with assumed extension or can be found in default ~/lib/Octology/f8/
  if(!defined($idat) && defined($ityp)){ # below are extensions of font types f8 should eventually support loading its objects from
    if   ($ityp =~ /^.*\.(f0?nt|psfu?)$/ && -e $ityp){$idat = $ityp;$ityp = $1;} #|pcf|bdf|(afm|pfb|pfm)|fon|otf|sit|hqx|pfa|sfd|ttf typz2EvNtually support
    elsif($ityp =~ /^.*\.(pal8)$/        && -e $ityp){$idat = $ityp;$ityp = $1;} # or load from pal8 file
    elsif($ityp =~ /^(\s*[0-9A-Za-z._]{3,4}\s*)+$/  ){$idat = $ityp;$ityp = 'pal8d8a';}} # also load from what looks like pal8 d8a (mAB accept F:RoYG too?)
  if    (!defined($ityp)){
    $self->loadf0nt(); # load the default f0nt if no parameters given, should probably load default pal8 for this case too
  }elsif(-e $idat && $ityp =~ /^(f0?nt|psfu?)$/){ # should do similar loading for other formats to support
    $self->loadf0nt($idat,$ityp);
  }elsif(-e $idat && $ityp eq 'pal8'){ # l8r also load from 8pal8 files && maybe expand d8a into useful forms like 8-bit decimal @RGB && HTML #HEX string
    $self->loadpal8($idat);
  }elsif($ityp eq 'pal8d8a' && $idat =~ /^(\s*[0-9A-Za-z._]{3,4}\s*)+$/){$self->{'pal8'} = $idat; # mAB do some betr error checking before loading object d8a
  } return($self);}
sub loadf0nt{my $self = shift;my $f8fn = shift;my $ftyp = shift;my($bgin,$ennd,$rndx); # even though method called loadF0NT, type might be other
  if(!defined($ftyp) && defined($f8fn)){$ftyp = $f8fn;$ftyp =~ s/^.*\.(\w+)$/$1/;} # load f0nt type from filename extension if no parameter came in
  if(!defined($f8fn) || !-r $f8fn || $ftyp !~ /^(f0?nt|psfu?)$/){ # make sure existing file is of supported type
    for(split(/\n/,$df8f)){
      if    (/^(f8.*)$/){             $self->{'f0nthedr'} = $1; # store the header string in case it's needed l8r
      }elsif(/^([0-7]?[0-9A-Za-z._])-([0-7]?[0-9A-Za-z._])$/){($bgin,$ennd,$rndx)=(b10($1),b10($2),0);
      }else{my @roww = split(/\s/,$_);
        for my $fndx ($bgin..$ennd){  $self->{'f0ntgd8a'}[$fndx][$rndx] = $roww[$fndx-$bgin];} $rndx++;
      }}                              $self->{'f0ntname'} = 'tektite.f0nt'; # store default name even though file doesn't actually exist to load from
                                      $self->{'f0nttype'} =         'f0nt';
  }else{ # if new called empty abov, load Default f8 tektite f0nt;
    open   my $f8fh,'<',$f8fn or die "!*EROR*! Couldn't open  f8 font file name:$f8fn for reading! $!";
    if     (  $ftyp eq 'f0nt'){ # rewrite f0nt file loading with error-checking && warnings
      binmode $f8fh,':encoding(UTF-8)';
      my @hdat=('s','4','0','G');my $mode=0;my $hite=16;my $widt=8;my $frwd=16; #int(159/($hedr[7]+1)); # F0nt Rowe WiDth in spAcd columnz of Xpanded bitmapz;
      my $mxcl=159; #79; #($ENV{'COLUMNS'}-1) if(exists($ENV{'COLUMNS'}) &&  $ENV{'COLUMNS'} >= $widt); # MaXimum char CoLum 2Uz in .f0nt spAcd bitmap lAoutz;
      my $fver='v0.0';my $vg01=0;my $flgz=0;my $bcnt=16;my $gcnt=256; # fVersionGr8rthan>0.1flag;
      $self->{   'f0nthedr'} = <$f8fh>; # B4 the while loop for bitmap blox && utable sectionz;
      if($self->{'f0nthedr'} =~ /^f80p\s+s\s+4\s+(\S+)\s+(\S+)/){ # handle old simple psf1-style non-Unicode b64 f0nt header
        $mode = b10($1);
        $hite = b10($2);@hdat = split(/\s+/,$self->{'f0nthedr'});shift(@hdat);} # get rid of unneeded first field 'f80p'
      else{ # parse new Xpanded hedr hashz
        my  @kvpz=split(/\s+/,$self->{'f0nthedr'});$kvpz[-1]=~ s/;$// if(@kvpz && defined($kvpz[-1]) && length($kvpz[-1])); # sepR8 Keey:Value PairZ from hedr;
        for(@kvpz){if(/^([^:]+):(.+)/){$self->{'f0nthdsh'}{$1}=$2; # crE8 a f0nt HeaDer haSH
            if($1 eq 'HxWd'){       if($self->{'f0nthdsh'}{'HxWd'}=~ /^(\d+)x(\d+)/){ # further sepR8 Hite_by_Widt_dimensionz
              $self->{                         'f0nthdsh'}{'Hite'}=$1;
              $self->{                         'f0nthdsh'}{'Widt'}=$2;}}}}
        if  (exists($self->{'f0nthdsh'})){
          if(exists($self->{'f0nthdsh'}{'Hite'})){$hite=$self->{'f0nthdsh'}{'Hite'};}
          if(exists($self->{'f0nthdsh'}{'Widt'})){$widt=$self->{'f0nthdsh'}{'Widt'};}
          if(exists($self->{'f0nthdsh'}{'Leng'})){$gcnt=$self->{'f0nthdsh'}{'Leng'};}
          if(exists($self->{'f0nthdsh'}{'fVer'})){$fver=$self->{'f0nthdsh'}{'fVer'};}
          if(exists($self->{'f0nthdsh'}{'Flgz'})){$flgz=$self->{'f0nthdsh'}{'Flgz'};}
          if(exists($self->{'f0nthdsh'}{'Mode'})){$mode=$self->{'f0nthdsh'}{'Mode'};}}}
      if($mode & 1){$gcnt=512;$bcnt=32;}
      elsif($fver=~ /^v?(\d+)\.(\d+)/ && ($1 > 0 || $2 > 1)){$vg01=1; # tSt 4 v0.2 or l8r wich shud support variable widthz besidez just old always 8-pixLz;
        $frwd=int($mxcl/($widt+1));$bcnt=int($gcnt/$frwd)+ 1;}
      while( <$f8fh>){ # add errorz or Carp/Croak if $bgin > $ennd, $ennd >= $gcnt, $rndx >= $hite, etc. althO mAB some of thEz can autO-upgrAd 2 new sIzez;
        if($vg01){ # l8r Dtect new otherwise unused utf8 charz in u8cz && auto-append them to the utable entry for the corresponding f0nt position;
          if   (/^(                   \d+)-(\d+                ):\s+(.*)$/x){($bgin,$ennd,$rndx)=($1,$2,0);my $u8cz=$3;}
          elsif( $flgz & 1               && # also l8r Dtect Ethr new othrwIz unUzd utf8 charz or DcOded HEX octetz an edit oper8ion mA have added 2 seqz;
                /^(                   \d+)\s*:\s*(.*);$/x ){my $indx=$1;my @seqz=split(/;/,$2);$self->{'f0ntutbl'}[$indx]=\@seqz;}
          elsif(/^((-|[^- ]){$widt}\s+)+(-|[^- ]){$widt}$/){my @roww=split(/\s+/,$_);
            for my $fndx($bgin..$ennd){$self->{'f0ntgd8a'}[$fndx][$rndx]=$roww[$fndx-$bgin];} $rndx++;}}
        else     {
          if   (/^(   [0-7]?[0-9A-Za-z._])-([0-7]?[0-9A-Za-z._]):?$/x){($bgin,$ennd,$rndx)=(b10($1),b10($2),0);}
          elsif(($mode & 2 || $mode & 4) &&
                /^\s*([0-7]?[0-9A-Za-z._])\s*:\s*(.*);$/  ){my $indx=b10($1);my @seqz=split(/;/,$2);$self->{'f0ntutbl'}[$indx]=\@seqz;}
          elsif(/^([-#]{$widt}\s+)+[-#]{$widt}$/){my @roww=split(/\s+/,$_);
            for my $fndx($bgin..$ennd){$self->{'f0ntgd8a'}[$fndx][$rndx]=$roww[$fndx-$bgin];} $rndx++;}}
      } close($f8fh) or die "!*EROR*! Couldn't close f8 f0nt file handle after reading! $!";
    }elsif($ftyp =~ /^(psfu?|fnt)$/){my $fd8a='';my $p4tn=0;#$fd8a.=$_ while(<$f8fh>); # PsfFormatTypeNumber(0=.fnt,1,2); mAB alsO File::Map or Sys::Mmap BlO;
      # from:HTTPS://StackOverFlow.Com/questions/206661/what-is-the-best-way-to-slurp-a-file-into-a-string-in-perl Don't Uz File::Slurp (huge securiT problM).
      $fd8a= do{ local($/);<$f8fh> }; # Either do local, use File::Slurper 'read_text';$txt=read_text($flnm);, or use Path::Tiny;$txt=path($flnm)->slurp_utf8;
      close(  $f8fh) or die "!*EROR*! Couldn't close f8 font file handle after reading! $!";my @fdat=unpack('C4',$fd8a); # mAB join('',<$f8fh>) wud work too?;
      # HTTPS://En.WikiPedia.Org/wiki/PC_Screen_Font (&& src cOd of Linux kbd utilz) describes PSF1 && PSF2 4m@z 4 console fontz;
      my @hedr =('s','4','0','G');if($ftyp ne 'fnt'){$p4tn++;for(0..$#fdat){$hedr[$_] = b64(shift(@fdat));}} # assume default header info for .fnt files
      if($hedr[0] eq '1o' && $hedr[1] eq '2r' && $hedr[2] eq '1A' && $hedr[3] eq '26'){$p4tn++; # reverse HEX bytez (LE) but same indices from psf.h
        # 0x86 134 26  or  0x864AB572 2,253,043,058 26IhLo; unpack templ8 4 header should be 'L<8' for 8 sepR8 unsigned 32-bit Longints LittleEndian;
        # 0x4A  74 1A; may want templ8 with '@' or '.' after C4 above 2 discard 1st 4 bytez for any binary .fnt or .psf && just have 7 Longz lFt hEr;
        # 0xB5 181 2r;
        # 0x72 114 1o; # L8 same as L<8 LittleEndian on my AMD64 but should probably keep Xplicit
        @hedr=unpack('L<8',$fd8a); # now parse out header fieldz to know sizes of header, whole glyph-set, bytes-per-glyph, && bitmap hite && widt in px;
        # probably figure out how 2 use '@' or '.' here instead of with the C4 above since it was all needed again 4 .fnt below but !4 this PSF2 8-bytez;
        # [pip@OniNA5MFjeR~/dvl/f8/f0nt/psf/Uni]Xc Uni2-Terminus20x10.psf hexcurse on header wi Vers:0 HdSz:32 Flgz:1 Leng:512 GCSz:40 Hite:20 Widt:10 so
        $hedr[0]='0x864AB572';my $leng=$hedr[4];
        $self->{'f0nthedr'}="Octl:f80p 4mat:f0nt Cmpt:psf2 fVer:v0.2 d8VS:$d8VS Mgic:$hedr[0] PVer:$hedr[1] HdSz:$hedr[2] " .
                            "Flgz:$hedr[3] Leng:$hedr[4] GlSz:$hedr[5] HxWd:$hedr[6]x$hedr[7];";
        @fdat=split(//,unpack("x$hedr[2]  B"  . ($hedr[5]*8*$leng),$fd8a)); # skip hedr && try 2 get 4 bitmapz of GlyphSize bytz as bitz (split) in2 fdat;
        for(0..($leng-1)){my $rwby=int($hedr[5]/$hedr[6]); # shud B just int already
          for   my $rowe(0..($hedr[6]-1)){$self->{'f0ntgd8a'}[$_][$rowe]= '-' x $hedr[7]; # hopefully load bitz in2 f0nt array
            for my $bitn(0..($hedr[7]-1)){
              if($fdat[($_*$hedr[5]*8)+($rowe*$rwby*8)+$bitn]){substr($self->{'f0ntgd8a'}[$_][$rowe],$bitn,1,'#');}}}}
        if($hedr[3] & 1){my $dndx=0;my @fdut=unpack("x$hedr[2] x" . ($hedr[5]*$leng) . ' C*',$fd8a); # now unpack unicode table at end if Flagz sayz it's there
          for my $indx(0..($hedr[4]-1)){$self->{'f0ntutbl'}[$indx]=[''];my $sndx=0;my $octz='';my $chrz=''; # 1st sequence is plain charz list, ...
                                                                        my $ocnt=0;my $bytz='';             # l8r sequencez proly compose sngl char
            while($fdut[$dndx] != 255 ){
              if ($fdut[$dndx] == 254 ){$self->{'f0ntutbl'}[$indx][  $sndx]=~ s/,?\s$/; /;
                $self->{                        'f0ntutbl'}[$indx][++$sndx] ='';} # would be nice to pack UTF-8 charz in abov glyph bitmapz too, l8r;
              else{$bytz.=sprintf("%02X ",$fdut[$dndx]);$octz.=pack('C',$fdut[$dndx]);$ocnt++;} # Encode::decode multi-byte UTF-8
              $dndx++;    $chrz= decode('UTF-8',$octz,Encode::FB_QUIET); # "bytez" in standardz documentz are also called "octetz";
              if (defined($chrz) && length($chrz)){         # FB_QUIET on error shud leave unprocessed portion in octz, but proly empty it out anyway?
                $chrz=~ s/;/ /;         $self->{'f0ntutbl'}[$indx][  $sndx].= "($chrz) $bytz" . ('   ' x (3-$ocnt)) . ", ";$ocnt=0;$bytz='';}
            } $dndx++;$self->{                  'f0ntutbl'}[$indx][  $sndx]=~ s/,?\s$/;/; }} # above ... (4-$ocnt) wud fit longSt cOdez but all seem 3or less
      }else{@fdat=unpack('C*',$fd8a);if($ftyp ne 'fnt'){for(0..3){shift(@fdat);}} # nEd 2 shft 4 off again if .psf since header 4 bytez unpacked again;
        my $mode = b10($hedr[2]);my $gcnt=256;$gcnt=512 if($mode & 1);
        my $hite = b10($hedr[3]);my $bcnt= 16;$bcnt= 32 if($mode & 1); # mAB mk hedr: 0x0436 0 16x8  ... or Xpand lIk psf2 abov?
        $self->{'f0nthedr'}="Octl:f80p 4mat:f0nt Cmpt:psf1 fVer:v0.1 d8VS:$d8VS Mgic:0x" . sprintf("%02X%02X ",b10($hedr[1]),b10($hedr[0])) .
                            "Mode:$mode Hite:$hite;";
        for       my $indx(0..($gcnt-1)){ # preload all d8a with blank bits then substr in approprE8 '#'
          for     my $rowe(0..($hite-1)){$self->{'f0ntgd8a'}[$indx][$rowe] = '--------';}}
        for       my $indx(0..($bcnt-1)){ # loop thru binary d8a && construct $self->{'f0ntgd8a'} like above
          for     my $rowe(0..($hite-1)){
            for   my $cndx(0..15){
              for my $colm(reverse(0..7)){
                if($fdat[($indx*16+$cndx)*$hite+$rowe] >= 2**$colm){
                  substr($self->{'f0ntgd8a'}[$indx*16+$cndx][$rowe],(7-$colm),1,'#');
                   $fdat[($indx*16+$cndx)*$hite+$rowe] -= 2**$colm;}}}}}
        if($mode & 2 || $mode & 4){ # load Unicode table sequences into some side map structure in my f0nt object
          shift(  @fdat) for(0..($gcnt*$hite-1));my $dndx=0; # discard now-empty glyph bitmap fdat before leaving just Unicode table
          for  my $indx(0..($gcnt-1)){$self->{'f0ntutbl'}[$indx]= [''];my $sndx=0; # 1st sequNc is just chars list, l8r sequNcz probably compose single char
            while($dndx <  $#fdat && ($fdat[$dndx] != 255 || $fdat[$dndx+1] != 255)){
              if ($dndx <  $#fdat &&  $fdat[$dndx] == 255 && $fdat[$dndx+1] == 254 ){ # mAB nEd 2 swap thEs bytz 4 LitlEndian ordr?
                $self->{   'f0ntutbl'}[$indx][  $sndx]=~ s/[, ;]*$/; /;
                $self->{   'f0ntutbl'}[$indx][++$sndx]='';}
              else{$self->{'f0ntutbl'}[$indx][  $sndx].= sprintf("%02X%02X ",$fdat[$dndx],$fdat[$dndx+1]);}
              $dndx+=2;    # It seemz all stepz thru UTable go in 2-byte incrementz for any of unicode value, sequence sepR8or, or font position termin8or;
            } $dndx+=2;    # Format of the Unicode information: (<uc> values are UCS-2 LE)
            $self->{       'f0ntutbl'}[$indx][  $sndx]=~ s/[, ;]*$/;/; }} # mAB try to add "($UCS2/$UTF16)" to utable l8r so charz can B visible lIk in v0.2;
      }}                              $self->{'f0ntname'} = $f8fn; # also store the filename just loaded (which may include path too)
                                      $self->{'f0nttype'} = $ftyp; #   && store the filetype too (should usually be same as f0ntname extension)
  }} # abov may want to $ftyp=~ s/u$// if I don't want to track .psfu as type instead of just .psf?;
sub loadpal8{my $self = shift;my $f8pn = shift;
  if(-e $f8pn){
    open   my $f8ph,'<',$f8pn or die "!*EROR*! Couldn't open  f8 pal8 file name:$f8pn for reading! $!";while(<$f8ph>){
      if    (/^pal8\s*(.*)$/){        $self->{'pal8'    } = $1;    # store the pal8d8a (right now multiple pal8 lines clobber leaving only last line's d8a)
      }}                              $self->{'pal8name'} = $f8pn; # also store the filename just loaded (which may include path too)
    close($f8ph) or die "!*EROR*! Couldn't close f8 pal8 file handle after reading! $!";
  }}
sub savef0nt{my $self = shift;my $f8fn = shift || 'dflt.f0nt';my $ftyp = shift; # attempt 2 save lossless roundtrip (should error check if!any loaded)
  if(!defined($ftyp) && defined($f8fn)){$ftyp = $f8fn;$ftyp =~ s/^.*\.(\w+)$/$1/;} # load f0nt type from filename extension if no parameter came in
  if($ftyp =~ /^(f0?nt|psfu?)$/){#|pcf|bdf|fon|otf|sit|hqx|pfa|sfd|ttf
    my @hdat=('s','4','0','G');my $mode=0;my $hite=16;my $widt=8;my $frwd=16; #int(159/($hedr[7]+1)); # F0nt Rowe WiDth in spaced columnz of expanded bitmapz;
    my $mxcl=159; #79; #($ENV{'COLUMNS'}-1) if(exists($ENV{'COLUMNS'}) &&  $ENV{'COLUMNS'} >= $widt); # MaXimum char CoLumn 2Use in .f0nt spAcd bitmap lAoutz;
    my $fver='v0.0';my $vg01=0;my $flgz=0;my $bcnt=16;my $gcnt=256; # fVersionGr8rthan>0.1flag; # nEd2 calQl8 bcnt from (widt+1) colmz in2 159 char colmz l8r;
    if($self->{'f0nthedr'} =~ /^f80p\s+s\s+4\s+(\S+)\s+(\S+)/){ # handle old simple psf1-style non-Unicode b64 f0nt header
      $mode = b10($1);
      $hite = b10($2);@hdat = split(/\s+/,$self->{'f0nthedr'});shift(@hdat);} # get rid of first field 'f80p'
    else{ # parse new Xpanded hedr hashz
      my  @kvpz=split(/\s+/,$self->{'f0nthedr'});$kvpz[-1]=~ s/;$// if(@kvpz && defined($kvpz[-1]) && length($kvpz[-1])); # sepR8 Keey:Value PairZ from hedr;
      for(@kvpz){if(/^([^:]+):(.+)/){$self->{'f0nthdsh'}{$1}=$2; # crE8 a f0nt HeaDer haSH
          if($1 eq 'HxWd'){       if($self->{'f0nthdsh'}{'HxWd'}=~ /^(\d+)x(\d+)/){ # further sepR8 Hite_by_Widt_dimensionz
            $self->{                         'f0nthdsh'}{'Hite'}=$1;
            $self->{                         'f0nthdsh'}{'Widt'}=$2;}}}}
      if  (exists($self->{'f0nthdsh'})){
        if(exists($self->{'f0nthdsh'}{'Hite'})){$hite=$self->{'f0nthdsh'}{'Hite'};}
        if(exists($self->{'f0nthdsh'}{'Widt'})){$widt=$self->{'f0nthdsh'}{'Widt'};}
        if(exists($self->{'f0nthdsh'}{'Leng'})){$gcnt=$self->{'f0nthdsh'}{'Leng'};}
        if(exists($self->{'f0nthdsh'}{'fVer'})){$fver=$self->{'f0nthdsh'}{'fVer'};}
        if(exists($self->{'f0nthdsh'}{'Flgz'})){$flgz=$self->{'f0nthdsh'}{'Flgz'};}
        if(exists($self->{'f0nthdsh'}{'Mode'})){$mode=$self->{'f0nthdsh'}{'Mode'};}}}
    if($mode & 1){$gcnt=512;$bcnt=32;}
    if($fver=~ /^v?(\d+)\.(\d+)/ && ($1 > 0 || $2 > 1)){$vg01=1; # test for v0.2 or l8r wich shud support variable widthz besidez just old always 8-pixelz;
      $frwd=int($mxcl/($widt+1));$bcnt=int($gcnt/$frwd)+ 1;}
    else{@hdat=('s','4',b64($mode),b64($hite));}
    open   my $f8fh,'>',$f8fn or die "!*EROR*! Couldn't open  f8 font file name:$f8fn for writing! $!"; # might want to check if exists to confirm overwrite?
    if    ($ftyp eq 'f0nt'){ binmode   $f8fh,':encoding(UTF-8)';
      print $f8fh $self->{'f0nthedr'},"\n";
      if  (exists($self->{'f0ntgd8a'}) && scalar(@{$self->{'f0ntgd8a'}}) >= $gcnt){
        for       my $blok(0..($bcnt-1)){my($rstr,$rend)=($blok*$frwd,($blok+1)*$frwd-1);
          $rend=(scalar(@{$self->{'f0ntgd8a'}})-1) if(scalar(@{$self->{'f0ntgd8a'}}) <= $rend);
          if(!$vg01){printf $f8fh "%s-%s:\n",b64($rstr),b64($rend);}
          else      {print  $f8fh "$rstr-$rend: ";my $nrsl=length("$rstr-$rend: ");if($flgz & 1){ # iNdexRangeStringLength
              for my $cndx($rstr..$rend){my $u8cz=join('',@{$self->{'f0ntutbl'}[$cndx]});
                $u8cz=~ s/(^$cndx\s*:\s+\(|\)\s+[^\(]*(\(|$))//g;$u8cz=~ s/[()]//g;$u8cz='(' if($cndx == 40);$u8cz=')' if($cndx == 41); # add basic pRNz bakin
                if( ($cndx-$rstr+1) * ($widt+1) > ($nrsl+1)){my $u8rm=($cndx-$rstr+1)*($widt+1)-$nrsl;$u8cz=substr($u8cz,0,$u8rm) if(length($u8cz)>$u8rm);
                  $u8cz=~ s/[,;]/ /g if($cndx == 44 || $cndx == 59); # try replacing troubling comma && semicolon utable delimiterz with just spacez 4 bitmapz
                  my $u8cr= $u8cz x $u8rm;$u8cr=substr($u8cr,0,($u8rm-1)) . ' ';
                  print     $f8fh   $u8cr;$nrsl+=$u8rm;}}} print $f8fh "\n";}
          for     my $rowe(0..($hite-1)){my $prwf=0;
            for   my $cndx($rstr..$rend){
              if(scalar(@{  $self->{'f0ntgd8a'}}) > $cndx            && defined($self->{'f0ntgd8a'}[$cndx]        ) &&
                 scalar(@{  $self->{'f0ntgd8a'}[    $cndx]}) > $rowe && defined($self->{'f0ntgd8a'}[$cndx][$rowe])){
                print $f8fh $self->{'f0ntgd8a'}[    $cndx][    $rowe];  print $f8fh ' ' if($cndx < $rend);$prwf=1;}}
            print     $f8fh "\n" if($prwf);}}
        if($flgz & 1 || $mode & 2 || $mode & 4){ # save Unicode table sequNcz from sId map struct in my f0nt object in2 a new .f0nt form of the Unicode tablez;
          for   my $indx(0.. ($gcnt-1)){
            if($vg01){printf $f8fh "%-4d: ",    $indx ;}
            else     {printf $f8fh "%-3s: ",b64($indx);} # .f0nt utable just 256 or 512 tXt lInz Ech stRting wi b64 ndx spAcd colon spc;
            for my $sndx(0.. (@{$self->{'f0ntutbl'}[$indx]}-1)){#$self->{'f0ntutbl'}[$indx][$sndx]=~ s/[, ;]*$/;/;
              print $f8fh $self->{      'f0ntutbl'}[$indx][$sndx]; # each initial char list or l8r sequence is just written with its own semicolon termin8or;
            } print $f8fh "\n"; }}}                                # && a newline termin8z each font position;
#   }elsif($ftyp =~ /^(psf)$/){$gcnt=256;print $f8fh pack('C',b10($_)) for(@hdat); # try 2 just gN old .psf 4 .bdf l8r?; 2du:fix this, it duz!work yet! =( ;
#     for               (0..($gcnt-1)){
#       for     my $rowe(0..($hite-1)){
#         for   my $rbnx(0.. int(($widt-1)/8)){my $rbyt = 0;
#           for my $colm(0..7){ # build Row byte d8a by columns
#             if(length($self->{'f0ntgd8a'}[$_][$rowe]) > (8*$rbnx)+7-$colm &&
#               substr ($self->{'f0ntgd8a'}[$_][$rowe],   (8*$rbnx)+7-$colm,1) !~ /^[-]$/){$rbyt += 2**$colm;}} # l8r might need to ck for more off-bit chars
#           print $f8fh pack('C',$rbyt);}}}
    }elsif($ftyp =~ /^(psfu?|fnt)$/){ # 2du:fix this && mk sure gNr8d .psf from new .f0nt renderz correct in console && then can gNr8 valid .bdf && .ttf too;
      if  ($ftyp =~ /^ psfu?$/x){if($vg01){print $f8fh pack('L<8',hex($self->{'f0nthdsh'}{'Mgic'}),$self->{'f0nthdsh'}{'PVer'},$self->{'f0nthdsh'}{'HdSz'},
                                                                  $flgz, $gcnt, $self->{'f0nthdsh'}{'GlSz'}, $hite, $widt);} # only psf gets header
                                 else     {print $f8fh pack('C',b10($_)) for(@hdat);}}
      for               (0..($gcnt-1)){
        for     my $rowe(0..($hite-1)){
          for   my $rbnx(0.. int(($widt-1)/8)){my $rbyt = 0;
            for my $colm(0..7){ # build Row byte d8a by columns
              if(length($self->{'f0ntgd8a'}[$_][$rowe]) > (8*$rbnx)+7-$colm &&
                substr ($self->{'f0ntgd8a'}[$_][$rowe],   (8*$rbnx)+7-$colm,1) !~ /^[-]$/){$rbyt += 2**$colm;}} # l8r might need to ck for more off-bit chars
            print $f8fh pack('C',$rbyt);}}}
      if($mode & 2 || $mode & 4 || ($flgz & 1 && $vg01)){ # save Unicode table sequences from side map structure in my f0nt object back into .psf table
        for     my $indx(0..($gcnt-1)){my @seqz=();@seqz=@{$self->{'f0ntutbl'}[$indx]} if(@{$self->{'f0ntutbl'}} > $indx && defined($self->{'f0ntutbl'}[$indx])
                                                                                       && @{$self->{'f0ntutbl'}[$indx]});
          for   my $sndx(0..$#seqz   ){
            if($vg01){my @uc8z= split(/\s+,\s+/,$seqz[$sndx]); # problem splitting on 0x2C (,) && probably on 0x3B (;) too?
              for     my $undx(0..$#uc8z){      $uc8z[$undx]=~ s/^(\s*\(.\)\s*)//g;$uc8z[$undx]=~ s/[^0-9A-F ]+//g;my @octz=split(/\s+/,$uc8z[$undx]);
                for   my $ondx(0..$#octz){print $f8fh pack('C',hex($octz[$ondx]));}}}
            else     {my @uc2z= split(    /\s+/,$seqz[$sndx]);
              for my $undx(0..$#uc2z ){my($byt0,$byt1)=(hex(substr($uc2z[$undx],0,2)),hex(substr($uc2z[$undx],2,2)));
                print $f8fh pack('C2',    $byt0,$byt1);}}
            if($sndx < $#seqz){
              print   $f8fh pack('C' , 255) unless($vg01);
              print   $f8fh pack('C' , 254);}  # utable ucod sequence   sepR8or
          } print     $f8fh pack('C' , 255) unless($vg01);
          print       $f8fh pack('C' , 255);}} # utable font position termin8or
    } close($f8fh) or die "!*EROR*! Couldn't close f8 font file handle after writing! $!"; }}
8;
# 2du:run mED.f0nt [0oOQ1iIl] mapz thru xx && gNr8 a 8x16 10x20 12x24 14x28 16x32 wide span of 1 thN the rvrs span of nXt so they overlay wi diagonal sepR8n,
#   mk rndtrip tSt 2 cnv all .psf 2 .f0nt && bak thN diff, save statz about how many utablez && sequencez map wich charz && wut charz augment Xisting 1z,
#   write upgrf0nt to take .fnt or orig.psf 256 && tMpl8 add up to 512 wi utable, thN upgr psf1 to psf2 including new rowz && columnz && upgrAd header,
#   mk nw batch cnvrtr from all 8x16z 2 10x20z 2 12x24z && 16x32z, accept .gz XtNsionz wi callz 2 gunzip && gzip,
#   fix pal8 constructor 2 Dtect just bAsic 8 (or lS) b64{3} RGB triplets 2 altr (Bgining of) 8bow, add methods 2 cnv pal8 d8a 2 useful altern8ive formats,
#   flesh out pal8 constructor to handle detectable map parameters to descriptively support ANSI && VGA ordering in addition to 2pal8,
#   build pal8 method to print VGA color change codes (with or without colorful verbose description),
#   rewrite pal8 to use f8 objects && allow 4 separ8 calls to define 8pal8 with maps for 16-block rows, mk interactive c8 2torial Xplaining f8 f0ntz && pal8z,
#   crE8 what's needed for new `f0nt` util (like `pal8`) to enable existing f0nt files to maybe become executable also so I can add ~/lib/Octology/f8/f0nt/
#     to my path to constantly have access to changing them like etfp could from the console or also eventually in my future c8-based 8term && 8sh,
#   use c8 further to incorpor8 best editor interfaces into new `f8` && maybe wrap common `pal8` && `f0nt` && `etfp` behaviors centrally,
#   also eventually support loading from at least .(tar.)?(zip|7z|t?(gz|bz2)) compressed archives of otherwise supported formats,
#   add methods 2write loaded f0nt out in all supportable binary formats (with constructors) /usr/share/fonts/(type1/gsfonts/*.([ap]f[bm])|X11/misc/*.pcf.gz),
#   keep considering whether separ8 f0nt && pal8 objects (or multiples of each) would be better than just letting common f8 objects be either or both,
#   consider supporting scalable fonts && making them editable in any ways that can be similar to default f0nt formats (or incorpor8d within, but not binary?);
# dun: mk .f0nt Encode UTF-8 nicely delimited from psf2, rewrite savef0nt .f0nt writing to work for loaded .fnt, orig.psf, .psfu (psf1), && new .psf (psf2),
#   rEwrIt loadf0nt .f0nt rEding all writN 4m@z, write handlerz for PSF2 4m@ for supporting .f0nt filez with more than 8 columnz, handle .psfu filez,
#   mv confUsingly nAmd psf2 to p2f && mv 2psf f2p (in sumb also), add psf2 wrItng 2 savef0nt,
#   in PSF1 4m@ $mode & 2 is just HASTAB wo any sequencez so tSt th@ && $mode & 4 shud have SEQ(uencez) inside of utable somewhere so only handle then?,
#   upd8 all f0nt && pal8 files to embed VERSION && d8VS strings in comments that then popul8 f8 objects when loading for supporting l8r varE8ions,
#   study $CHARMAP "UTF-8" && $CODESET "Uni2" in /usr/share/consolefonts/*.psf.gz 2NAbl psf2f0nt 2uz && cnv Unicode .psf formats to && from .f0nt too;
# nOt:my $ucs2=Encode( ... psf1 octetz);my $utf8=`echo -n "$ucs2" | iconv -f UCS-2LE -t UTF-8`; # mAB but Perl's decode(UTF-8, encode(UCS-2LE, @ucs2octz)); ?

# PC Screen Font (PSF) is a bitmap font format currently employed by the Linux kernel for console fonts. Documentation of the PSF file format can be found
#   within the source code of the Linux kbd utilities.[1] The format is described by the University Eindhoven.[2]
#   File format
#     File header
# Every PSF file begins with a header. There are two header types: PSF1 and PSF2. All multibyte integers are in least significant byte order (little endian).
# psf1 header Length     Description     Notes  # All psf1 glyphs are 8 pixels wide.
#             2          Magic bytes     Always 36 04
#             1          PSF Font mode   Various font flags, see font modes
#             1          Glyph size      Glyph size in bytes, 8 bit unsigned integer. For psf1 to character size always equals the glyph height
# psf2 header Length     Description     Notes
#             4          Magic bytes     Always 72 b5 4a 86
#             4          Version         32 bit unsigned integer, currently always 0
#             4          Header Size     32 bit unsigned integer, size of the header in bytes (usually 32)
#             4          Flags           32 bit unsigned integer, see Font flags
#             4          Length          32 bit unsigned integer, number of           glyphs
#             4          Glyph size      32 bit unsigned integer, number of bytes per glyph
#             4          Height          32 bit unsigned integer, height of each      glyph
#             4          Width           32 bit unsigned integer, width  of each      glyph
# [pip@OniNA5MFjeR~/dvl/f8/f0nt/psf/Uni]Xc Uni2-Terminus20x10.psf opened hexcurse on header wi Vers:0 HdSz:32 Flgz:1 Leng:512 GCSz:40 Hite:20 Widt:10
# 00000000 72 B5 4A 86 00 00 00 00 20 00 00 00 01 00 00 00 â”‚r.J..... .......â”‚ # psf.h says GlyphCharSiZe = Hite * int((Widt+7) / 8) so 20 * int(17 / 8)
# 00000010 00 02 00 00 28 00 00 00 14 00 00 00 0A 00 00 00 â”‚....(...........| #   is 20 * 2 == 40. Looks correct;
#     Font modes
# The font mode in a psf1 header is an 8 bit unsigned integer containing various flags about the font
# Font mode bits Value (hex)     Name             Meaning
#                0x01            PSF1_MODE512     If this bit is set, font face will have 512 glyphs. If unset, then the font face will have just 256 glyphs.
#                0x02            PSF1_MODEHASTAB  If this bit is set, the font face will have a unicode table.
#                0x04            PSF1_MODESEQ     Equivalent to PSF1_MODEHASTAB
#                0x05            PSF1_MAXMODE     Not sure when 512 + SEQ would be specified instead of 512 + HASTAB, diff being?
#     Font flags
# The font flags field in a psf2 header is a 32 bit unsigned integer containing various flags about the font. There is currently only one flag.
# Font flag bits Value (hex)     Name                    Meaning
#                0x00000001      PSF2_HAS_UNICODE_TABLE  If this bit is set, the font face will have a unicode table
#     File bitmaps
# The actual glyph data immediately follows the header. Each bit in each glyph represents one pixel in the font: 0 for undrawn, 1 for drawn. Each row of each
#   glyph is padded to a whole number of bytes. For example, a 12x12 font would have 2 bytes per row. The letter 'A' in a 12x12 PSF bitmap may look like this:
#            padding
#     Font data    |
#     +----------+ +--+
#     000001100000 0000
#     000011110000 0000
#     000110011000 0000
#     001100001100 0000
#     011000000110 0000
#     110000000011 0000
#     111111111111 0000
#     111111111111 0000
#     110000000011 0000
#     110000000011 0000
#     110000000011 0000
#     110000000011 0000
#   with twelve bits of actual data and padding to fill each row to the nearest byte. Rows are stored left-most column first.
#     The unicode table
# If a PSF file contains a unicode table, then every glyph has an entry in the unicode table, with the first glyph corresponding to the first entry in the
#   table, the second glyph the second entry, and so on. The format of an entry in the unicode table depends on the type of the PSF header.
#     The PSF1 unicode table
# Entries in the unicode table of a PSF1 file are represented as a series of 16 bit little-endian unsigned integers ending in 0xffff. The first integers in
#   the entry contain a unicode character represented by the corresponding glyph. These unicode characters continue until the integer 0xFFFE is encountered.
# Then, starting from the 0xfffe value, rather than representing individual unicode characters, the numbers represent series of unicode characters that
#   correspond to the glyph, starting a new series with every 0xfffe encountered, and stopping once 0xffff is encountered. For example, the following series
#   of 16 bit little-endian unsigned integers would be interpreted in the following way:
#     0xdead
#     0xbeef
#
#     0xfffe
#     0x3141
#     0x5926
#
#     0xfffe
#     0x1234
#     0x5678
#
#     0xffff
# Whenever either U+dead, U+beef, the sequence U+3141 U+5926, or the sequence U+1234 U+5678 is seen, display glyph corresponding 2 this unicode table entry.
#     The PSF2 unicode table
# Entries in the unicode table of a PSF2 file are the same as those in a PSF1 file, except unicode characters are represented in UTF-8, unicode sequences
#   begin with the one byte sequence 0xfe rather than the two byte sequence 0xfffe, and unicode entries end with the one byte sequence 0xff rather than the
#   two byte sequence 0xffff.
    # For each font position <uc>*<seq>*<term> where <uc> is a 2-byte little endian Unicode value, <seq> = <ss><uc><uc>*, <ss> = psf1 ? 0xFFFE : 0xFE,
    #   <term> = psf1 ? 0xFFFF : 0xFF. and * denotes zero or more occurrences of the preceding item.
    # Semantics: The leading <uc>* part gives Unicode symbols that are all represented by this font position. The following sequences are sequences of
    #   Unicode symbols - probably a symbol together with combining accents - also represented by this font position.
    # Example  : At the font position for a capital A-ring glyph, we may have:  00C5,212B,FFFE,0041,030A,FFFF
    # Some font positions may be described by sequences only, namely when there is no precomposed Unicode value for the glyph.
#     References
#   TUE                           (1999).  "psf format". HTTP://WWW.Win.Tue.NL/~aeb/linux/kbd/font-formats-1.html
#   the Linux Kernel Organization (2007-01-28). "psf.h". HTTPS://Git.Kernel.Org/cgit/linux/kernel/git/legion/kbd.git/tree/src/psf.h?id=82dd58358bd341f8ad71155a53a561cf311ac974
# From psf.h link abov:
#   Format and semantics of psf2 version 0 are as psf (with PSF_MAXMODE == 5). However, this allows one to specify the length. It turns out to be very useful
#     to be able to work with fonts with a few symbols or even only one (like the Euro), and with very large fonts (like several thousand Unicode symbols
#     done in the same style). Following hpa's suggestion, psf2 uses UTF-8 rather than UCS-2, and has 32-bit magic 0x864ab572. Ints are LittleEndian 4-bytez;
# #define PSF2_MAGIC0 0x72
# #define PSF2_MAGIC1 0xb5
# #define PSF2_MAGIC2 0x4a
# #define PSF2_MAGIC3 0x86
# struct  psf2_header {
#   unsigned char magic[4];
#   unsigned int  version;
#   unsigned int  headersize;         // offset of bitmaps in file
#   unsigned int  flags;
#   unsigned int  length;             // number of glyphs
#   unsigned int  charsize;           // number of bytes for each character
#   unsigned int  height, width; };   // max dimensions of glyphs // charsize = height * ((width + 7) / 8)
# #define PSF2_HAS_UNICODE_TABLE 0x01 // bits used in flags
# #define PSF2_MAXVERSION           0 // max version recognized so far
# #define PSF2_SEPARATOR         0xFF // UTF8 separators
# #define PSF2_STARTSEQ          0xFE
# HTTP://GRUB.GibiBit.Com/New_font_format describes the much more complex PFF2 (.pf2) BitMapped Font-File Format which I might also want to support someday.
#   It seems .pf2 (PUPA?) format is only supported by GRUB. I haven't found a way to load them into normal Linux FrameBuffer console so probably don't need;
# NAIM0N0S:HTTPS://YouTu.be/JXJ8eONH1C4 "Linux MonoSpaced Font TierList" # N41:0Nw0 of TesterTech:"Every font is a bit fun!" on:FiraCode, BPMono, Hack, Sudo,
#   3270IBM, ComicShanns, FixedSysExcelsior, Hermit, Inconsolata, Iosevka, JetBrainsMono, Lotion, MonoFlow, MPlusCode50, NotoSansMono, SourceCodePro, Victor;
